// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(WeSignEntities))]
    [Migration("20240723071637_AddToDocumentCollectionShouldEnableMeaningOfSignatureBooleanField")]
    partial class AddToDocumentCollectionShouldEnableMeaningOfSignatureBooleanField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.DAOs.ActiveDirectory.ActiveDirectoryConfigDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Host")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActiveDirectoryConfigurations");
                });

            modelBuilder.Entity("DAL.DAOs.ActiveDirectory.ActiveDirectoryGroupDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActiveDirectoryContactsGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActiveDirectoryUsersGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .IsUnique();

                    b.ToTable("ActiveDirectoryGroups");
                });

            modelBuilder.Entity("DAL.DAOs.Companies.CompanyConfigurationDAO", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanUserControlReminderSettings")
                        .HasColumnType("bit");

                    b.Property<int>("DefaultSigningType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("DeleteSignedDocumentAfterXDays")
                        .HasColumnType("int");

                    b.Property<int>("DeleteUnsignedDocumentAfterXDays")
                        .HasColumnType("int");

                    b.Property<string>("DocumentNotificationsEndpoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EnableDisplaySignerNameInSignature")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("EnableVisualIdentityFlow")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<int>("MinimumPasswordLength")
                        .HasColumnType("int");

                    b.Property<int>("PasswordExpirationInDays")
                        .HasColumnType("int");

                    b.Property<int>("RecentPasswordsAmount")
                        .HasColumnType("int");

                    b.Property<bool>("ShouldEnableMeaningOfSignatureOption")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldEnableSignReminders")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldForceOTPInLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldNotifyWhileSignerSigned")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldSendDocumentNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldSendSignedDocument")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldSendWithOTPByDefault")
                        .HasColumnType("bit");

                    b.Property<int>("SignReminderFrequencyInDays")
                        .HasColumnType("int");

                    b.Property<string>("SignatureColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SignerLinkExpirationInDays")
                        .HasColumnType("int");

                    b.Property<bool>("isPersonalizedPFX")
                        .HasColumnType("bit");

                    b.HasKey("CompanyId");

                    b.ToTable("CompanyConfigurations");

                    b.HasData(
                        new
                        {
                            CompanyId = new Guid("00000000-0000-0000-0000-000000000505"),
                            CanUserControlReminderSettings = false,
                            DefaultSigningType = 1,
                            DeleteSignedDocumentAfterXDays = 0,
                            DeleteUnsignedDocumentAfterXDays = 0,
                            EnableDisplaySignerNameInSignature = true,
                            EnableVisualIdentityFlow = false,
                            Language = 0,
                            MinimumPasswordLength = 0,
                            PasswordExpirationInDays = 0,
                            RecentPasswordsAmount = 3,
                            ShouldEnableMeaningOfSignatureOption = false,
                            ShouldEnableSignReminders = false,
                            ShouldForceOTPInLogin = false,
                            ShouldNotifyWhileSignerSigned = false,
                            ShouldSendDocumentNotifications = false,
                            ShouldSendSignedDocument = false,
                            ShouldSendWithOTPByDefault = false,
                            SignReminderFrequencyInDays = 0,
                            SignerLinkExpirationInDays = 0,
                            isPersonalizedPFX = false
                        },
                        new
                        {
                            CompanyId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CanUserControlReminderSettings = false,
                            DefaultSigningType = 1,
                            DeleteSignedDocumentAfterXDays = 0,
                            DeleteUnsignedDocumentAfterXDays = 0,
                            EnableDisplaySignerNameInSignature = true,
                            EnableVisualIdentityFlow = false,
                            Language = 0,
                            MinimumPasswordLength = 0,
                            PasswordExpirationInDays = 0,
                            RecentPasswordsAmount = 3,
                            ShouldEnableMeaningOfSignatureOption = false,
                            ShouldEnableSignReminders = false,
                            ShouldForceOTPInLogin = false,
                            ShouldNotifyWhileSignerSigned = false,
                            ShouldSendDocumentNotifications = false,
                            ShouldSendSignedDocument = false,
                            ShouldSendWithOTPByDefault = false,
                            SignReminderFrequencyInDays = 0,
                            SignerLinkExpirationInDays = 0,
                            isPersonalizedPFX = false
                        });
                });

            modelBuilder.Entity("DAL.DAOs.Companies.CompanyDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActiveDirectoryConfigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProgramUtilizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActiveDirectoryConfigId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ProgramUtilizationId")
                        .IsUnique()
                        .HasFilter("[ProgramUtilizationId] IS NOT NULL");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Free Accounts",
                            ProgramId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000505"),
                            Name = "Ghost Users",
                            ProgramId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("DAL.DAOs.Companies.CompanySigner1DetailDAO", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShouldShowInUI")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldSignAsDefaultValue")
                        .HasColumnType("bit");

                    b.Property<string>("Signer1Endpoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signer1Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signer1User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("CompanySigner1Details");
                });

            modelBuilder.Entity("DAL.DAOs.Configurations.CompanyMessageDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<int>("SendingMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyMessages");
                });

            modelBuilder.Entity("DAL.DAOs.Configurations.ConfigurationDAO", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("Configuration");

                    b.HasData(
                        new
                        {
                            Key = "SmtpServer",
                            Value = ""
                        },
                        new
                        {
                            Key = "SmtpPort",
                            Value = "25"
                        },
                        new
                        {
                            Key = "SmtpUser",
                            Value = ""
                        },
                        new
                        {
                            Key = "SmtpPassword",
                            Value = ""
                        },
                        new
                        {
                            Key = "SmtpFrom",
                            Value = ""
                        },
                        new
                        {
                            Key = "SmtpEnableSsl",
                            Value = "False"
                        },
                        new
                        {
                            Key = "SmtpAttachmentMaxSize",
                            Value = "8388608"
                        },
                        new
                        {
                            Key = "SmsUser",
                            Value = ""
                        },
                        new
                        {
                            Key = "SmsPassword",
                            Value = ""
                        },
                        new
                        {
                            Key = "SmsFrom",
                            Value = ""
                        },
                        new
                        {
                            Key = "SmsProvider",
                            Value = "1"
                        },
                        new
                        {
                            Key = "SmsLanguage",
                            Value = "1"
                        },
                        new
                        {
                            Key = "DeleteSignedDocumentAfterXDays",
                            Value = "14"
                        },
                        new
                        {
                            Key = "DeleteUnsignedDocumentAfterXDays",
                            Value = "30"
                        },
                        new
                        {
                            Key = "MessageBefore",
                            Value = "[DOCUMENT_NAME] : [LINK]"
                        },
                        new
                        {
                            Key = "MessageBeforeHebrew",
                            Value = "[DOCUMENT_NAME] : [LINK]"
                        },
                        new
                        {
                            Key = "MessageAfter",
                            Value = "[DOCUMENT_NAME] signed successfully. [LINK]"
                        },
                        new
                        {
                            Key = "MessageAfterHebrew",
                            Value = "[DOCUMENT_NAME] נחתם בהצלחה. [LINK]"
                        },
                        new
                        {
                            Key = "LogArichveIntervalInDays",
                            Value = "30"
                        },
                        new
                        {
                            Key = "UseManagementOtpAuth",
                            Value = "false"
                        },
                        new
                        {
                            Key = "EnableFreeTrailUsers",
                            Value = "false"
                        },
                        new
                        {
                            Key = "EnableShowSSOOnlyInUserUI",
                            Value = "false"
                        },
                        new
                        {
                            Key = "EnableTabletsSupport",
                            Value = "false"
                        },
                        new
                        {
                            Key = "EnableSigner1ExtraSigningTypes",
                            Value = "false"
                        },
                        new
                        {
                            Key = "ShouldUseReCaptchaInRegistration",
                            Value = "false"
                        },
                        new
                        {
                            Key = "Signer1Endpoint",
                            Value = ""
                        },
                        new
                        {
                            Key = "Signer1User",
                            Value = ""
                        },
                        new
                        {
                            Key = "Signer1Password",
                            Value = ""
                        },
                        new
                        {
                            Key = "ShouldUseSignerAuth",
                            Value = "false"
                        },
                        new
                        {
                            Key = "ShouldUseSignerAuthDefault",
                            Value = "false"
                        },
                        new
                        {
                            Key = "SendWithOTPByDefault",
                            Value = "false"
                        },
                        new
                        {
                            Key = "EnableVisualIdentityFlow",
                            Value = "false"
                        },
                        new
                        {
                            Key = "EnableRenewalPayingUserLogic",
                            Value = "false"
                        },
                        new
                        {
                            Key = "VisualIdentityURL",
                            Value = ""
                        },
                        new
                        {
                            Key = "VisualIdentityUser",
                            Value = ""
                        },
                        new
                        {
                            Key = "VisualIdentityPassword",
                            Value = ""
                        },
                        new
                        {
                            Key = "ExternalPdfServiceURL",
                            Value = ""
                        },
                        new
                        {
                            Key = "ExternalPdfServiceAPIKey",
                            Value = ""
                        },
                        new
                        {
                            Key = "UseExternalGraphicSignature",
                            Value = "false"
                        },
                        new
                        {
                            Key = "ExternalGraphicSignatureSigner1Url",
                            Value = ""
                        },
                        new
                        {
                            Key = "ExternalGraphicSignatureCert",
                            Value = ""
                        },
                        new
                        {
                            Key = "ExternalGraphicSignaturePin",
                            Value = ""
                        },
                        new
                        {
                            Key = "ShouldReturnActivationLinkInAPIResponse",
                            Value = "false"
                        },
                        new
                        {
                            Key = "RecentPasswordsAmount",
                            Value = "3"
                        });
                });

            modelBuilder.Entity("DAL.DAOs.Configurations.MessageProviderDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EnableSsl")
                        .HasColumnType("bit");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int>("ProviderType")
                        .HasColumnType("int");

                    b.Property<int>("SendingMethod")
                        .HasColumnType("int");

                    b.Property<string>("Server")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("MessageProviders");
                });

            modelBuilder.Entity("DAL.DAOs.Configurations.TabletDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tablets");
                });

            modelBuilder.Entity("DAL.DAOs.Configurations.UserConfigurationDAO", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<bool>("ShouldDisplayNameInSignature")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldNotifySignReminder")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldNotifyWhileSignerSigned")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldSendSignedDocument")
                        .HasColumnType("bit");

                    b.Property<int>("SignReminderFrequencyInDays")
                        .HasColumnType("int");

                    b.Property<string>("SignatureColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("shouldNotifyWhileSignerViewed")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("UserConfigurations");
                });

            modelBuilder.Entity("DAL.DAOs.Contacts.ContactDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreationSource")
                        .HasColumnType("int");

                    b.Property<int>("DefaultSendingMethod")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUsedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("DAL.DAOs.Contacts.ContactGroupMemberDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactsGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ContactsGroupId");

                    b.ToTable("ContactGroupMembers");
                });

            modelBuilder.Entity("DAL.DAOs.Contacts.ContactSealsDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactSeals");
                });

            modelBuilder.Entity("DAL.DAOs.Contacts.ContactsGroupDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactsGroups");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.DocumentCollectionDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CallbackUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DistributionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShouldEnableMeaningOfSignature")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShouldSend")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShouldSendSignedDocument")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShouldSignUsingSigner1AfterDocumentSigningFlow")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SignedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentCollections");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.DocumentDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DocumentCollectionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.DocumentSignatureFieldDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentSignatureFields");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.SignerFieldDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SignerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SignerId");

                    b.ToTable("SignerFields");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.NotesDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SignerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SignerNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNote")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SignerId")
                        .IsUnique();

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.SignerAttachmentDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SignerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SignerId");

                    b.ToTable("SignerAttachments");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.SignerDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AuthMode")
                        .HasColumnType("int");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstViewIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentificationAttempts")
                        .HasColumnType("int");

                    b.Property<int>("SendingMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeLastSent")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeRejected")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeSent")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeSigned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeViewed")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("DocumentCollectionId");

                    b.ToTable("Signers");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.SignerOtpDetailsDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<Guid>("SignerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SignerId")
                        .IsUnique();

                    b.ToTable("SignerOtpDetails");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.SignerTokenMappingDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ADName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GuidAuthToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GuidToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JwtToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SignerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DocumentCollectionId");

                    b.ToTable("SignerTokensMapping");
                });

            modelBuilder.Entity("DAL.DAOs.Groups.AdditionalGroupMapperDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("AdditionalGroupsMapper");
                });

            modelBuilder.Entity("DAL.DAOs.Groups.GroupDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GroupStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DAL.DAOs.Logs.LogDAO", b =>
                {
                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TimeStamp");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("DAL.DAOs.Logs.ManagementLogDAO", b =>
                {
                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TimeStamp");

                    b.ToTable("ManagementLogs");
                });

            modelBuilder.Entity("DAL.DAOs.Logs.SignerLogDAO", b =>
                {
                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TimeStamp");

                    b.ToTable("SignerLogs");
                });

            modelBuilder.Entity("DAL.DAOs.Programs.ProgramDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("DocumentsPerMonth")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ServerSignature")
                        .HasColumnType("bit");

                    b.Property<bool>("SmartCard")
                        .HasColumnType("bit");

                    b.Property<long>("SmsPerMonth")
                        .HasColumnType("bigint");

                    b.Property<long>("Templates")
                        .HasColumnType("bigint");

                    b.Property<long>("Users")
                        .HasColumnType("bigint");

                    b.Property<long>("VisualIdentificationsPerMonth")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Programs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            DocumentsPerMonth = 5L,
                            Name = "Trial",
                            Note = "Upgrade now by calling our Support Center: (+972)3-1111111",
                            ServerSignature = false,
                            SmartCard = false,
                            SmsPerMonth = 0L,
                            Templates = 2L,
                            Users = 0L,
                            VisualIdentificationsPerMonth = 0L
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            DocumentsPerMonth = -1L,
                            Name = "Unlimited",
                            ServerSignature = true,
                            SmartCard = true,
                            SmsPerMonth = -1L,
                            Templates = -1L,
                            Users = -1L,
                            VisualIdentificationsPerMonth = 0L
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            DocumentsPerMonth = 50L,
                            Name = "Basic",
                            ServerSignature = true,
                            SmartCard = true,
                            SmsPerMonth = 200L,
                            Templates = 15L,
                            Users = 2L,
                            VisualIdentificationsPerMonth = 0L
                        });
                });

            modelBuilder.Entity("DAL.DAOs.Programs.ProgramUIViewDAO", b =>
                {
                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ShouldShowAddNewTemplate")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowContacts")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowDistribution")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowDocuments")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowEditCheckboxField")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowEditDateField")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowEditEmailField")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowEditListField")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowEditNumberField")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowEditPhoneField")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowEditRadioField")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowEditSignatureField")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowEditTextField")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowGroupSign")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowLiveMode")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowMultilineText")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowProfile")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowSelfSign")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowTemplates")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowUploadAndsign")
                        .HasColumnType("bit");

                    b.HasKey("ProgramId");

                    b.ToTable("ProgramsUIView");
                });

            modelBuilder.Entity("DAL.DAOs.Programs.ProgramUtilizationDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("DocumentsLimit")
                        .HasColumnType("bigint");

                    b.Property<int>("DocumentsSentNotifyCount")
                        .HasColumnType("int");

                    b.Property<long>("DocumentsUsage")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastResetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProgramResetType")
                        .HasColumnType("int");

                    b.Property<long>("SMS")
                        .HasColumnType("bigint");

                    b.Property<int>("SmsSentNotifyCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Templates")
                        .HasColumnType("bigint");

                    b.Property<long>("Users")
                        .HasColumnType("bigint");

                    b.Property<int>("VisualIdentificationUsedNotifyCount")
                        .HasColumnType("int");

                    b.Property<long>("VisualIdentifications")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ProgramUtilizations");
                });

            modelBuilder.Entity("DAL.DAOs.Programs.ProgramUtilizationHistoryDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DocumentsUsage")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResourceMode")
                        .HasColumnType("int");

                    b.Property<long>("SmsUsage")
                        .HasColumnType("bigint");

                    b.Property<long>("TemplatesUsage")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UsersUsage")
                        .HasColumnType("bigint");

                    b.Property<long>("VisualIdentificationsUsage")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ProgramUtilizationHistories");
                });

            modelBuilder.Entity("DAL.DAOs.Templates.TemplateDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatetime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUsedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("DAL.DAOs.Templates.TemplateSignatureFieldDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SignaturFieldType")
                        .HasColumnType("int");

                    b.Property<int>("SignatureKind")
                        .HasColumnType("int");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateSignatureFields");
                });

            modelBuilder.Entity("DAL.DAOs.Templates.TemplateTextFieldDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Regex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TextFieldType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateTextFields");
                });

            modelBuilder.Entity("DAL.DAOs.Users.UserDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreationSource")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GroupDAOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PasswordSetupTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProgramUtilizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GroupDAOId");

                    b.HasIndex("ProgramUtilizationId")
                        .IsUnique()
                        .HasFilter("[ProgramUtilizationId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CompanyId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreationSource = 0,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "systemadmin@comda.co.il",
                            GroupId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastSeen = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SystemAdmin",
                            Password = "aFDgUq3rMdhhvRqzQ+/9v51hevUQyVubl2XdsvpZqQ/Q4dVz",
                            PasswordSetupTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CompanyId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreationSource = 0,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "paymentAdmin@comda.co.il",
                            GroupId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastSeen = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PaymentAdmin",
                            Password = "aFDgUq3rMdhhvRqzQ+/9v51hevUQyVubl2XdsvpZqQ/Q4dVz",
                            PasswordSetupTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000505"),
                            CompanyId = new Guid("00000000-0000-0000-0000-000000000505"),
                            CreationSource = 0,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ghost@comda.co.il",
                            GroupId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastSeen = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GhostUser",
                            Password = "oRxggjg8wbOxTC5DvP4vXzV32vFmnNdhQH8vRpElJ6lziTJk",
                            PasswordSetupTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000606"),
                            CompanyId = new Guid("00000000-0000-0000-0000-000000000505"),
                            CreationSource = 0,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dev@comda.co.il",
                            GroupId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastSeen = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DevUser",
                            Password = "h05j6uZ6S0kHffebPVOUy4Cr1QBfRbsb9oO4/IShSVNyw9sc",
                            PasswordSetupTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Type = 7
                        });
                });

            modelBuilder.Entity("DAL.DAOs.Users.UserPasswordHistoryDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UsersPasswordHistory");
                });

            modelBuilder.Entity("DAL.DAOs.Users.UserTokensDAO", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastLoginGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UsersTokens");
                });

            modelBuilder.Entity("DAL.DAOs.ActiveDirectory.ActiveDirectoryGroupDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Groups.GroupDAO", "Group")
                        .WithOne("ActiveDirectoryGroup")
                        .HasForeignKey("DAL.DAOs.ActiveDirectory.ActiveDirectoryGroupDAO", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("DAL.DAOs.Companies.CompanyConfigurationDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Companies.CompanyDAO", "Company")
                        .WithOne("CompanyConfiguration")
                        .HasForeignKey("DAL.DAOs.Companies.CompanyConfigurationDAO", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DAL.DAOs.Companies.CompanyDAO", b =>
                {
                    b.HasOne("DAL.DAOs.ActiveDirectory.ActiveDirectoryConfigDAO", "ActiveDirectoryConfig")
                        .WithMany()
                        .HasForeignKey("ActiveDirectoryConfigId");

                    b.HasOne("DAL.DAOs.Programs.ProgramDAO", "Program")
                        .WithMany("Companies")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.DAOs.Programs.ProgramUtilizationDAO", "ProgramUtilization")
                        .WithOne("Company")
                        .HasForeignKey("DAL.DAOs.Companies.CompanyDAO", "ProgramUtilizationId");

                    b.Navigation("ActiveDirectoryConfig");

                    b.Navigation("Program");

                    b.Navigation("ProgramUtilization");
                });

            modelBuilder.Entity("DAL.DAOs.Companies.CompanySigner1DetailDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Companies.CompanyDAO", "Company")
                        .WithOne("CompanySigner1Details")
                        .HasForeignKey("DAL.DAOs.Companies.CompanySigner1DetailDAO", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DAL.DAOs.Configurations.CompanyMessageDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Companies.CompanyConfigurationDAO", "CompanyConfiguration")
                        .WithMany("CompanyMessages")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyConfiguration");
                });

            modelBuilder.Entity("DAL.DAOs.Configurations.MessageProviderDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Companies.CompanyConfigurationDAO", "CompanyConfiguration")
                        .WithMany("MessageProviders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyConfiguration");
                });

            modelBuilder.Entity("DAL.DAOs.Configurations.UserConfigurationDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Users.UserDAO", "User")
                        .WithOne("UserConfiguration")
                        .HasForeignKey("DAL.DAOs.Configurations.UserConfigurationDAO", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.DAOs.Contacts.ContactDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Users.UserDAO", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.DAOs.Contacts.ContactGroupMemberDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Contacts.ContactDAO", "Contact")
                        .WithMany("ContactGroupsMember")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.DAOs.Contacts.ContactsGroupDAO", "ContactsGroup")
                        .WithMany("ContactGroupMembers")
                        .HasForeignKey("ContactsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("ContactsGroup");
                });

            modelBuilder.Entity("DAL.DAOs.Contacts.ContactSealsDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Contacts.ContactDAO", "Contact")
                        .WithMany("Seals")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.DocumentCollectionDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Users.UserDAO", "User")
                        .WithMany("DocumentCollections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.DocumentDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Documents.DocumentCollectionDAO", "DocumentCollection")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.DAOs.Templates.TemplateDAO", "Template")
                        .WithMany("Documents")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocumentCollection");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.DocumentSignatureFieldDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Documents.DocumentDAO", "Document")
                        .WithMany("SignatureFields")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.SignerFieldDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Documents.Signers.SignerDAO", "Signer")
                        .WithMany("SignerFields")
                        .HasForeignKey("SignerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Signer");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.NotesDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Documents.Signers.SignerDAO", "Signer")
                        .WithOne("Notes")
                        .HasForeignKey("DAL.DAOs.Documents.Signers.NotesDAO", "SignerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Signer");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.SignerAttachmentDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Documents.Signers.SignerDAO", "Signer")
                        .WithMany("SignerAttachments")
                        .HasForeignKey("SignerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Signer");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.SignerDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Contacts.ContactDAO", "Contact")
                        .WithMany("Signers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.DAOs.Documents.DocumentCollectionDAO", "DocumentCollection")
                        .WithMany("Signers")
                        .HasForeignKey("DocumentCollectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("DocumentCollection");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.SignerOtpDetailsDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Documents.Signers.SignerDAO", "Signer")
                        .WithOne("OtpDetails")
                        .HasForeignKey("DAL.DAOs.Documents.Signers.SignerOtpDetailsDAO", "SignerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Signer");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.SignerTokenMappingDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Documents.DocumentCollectionDAO", "DocumentCollection")
                        .WithMany("TokensMapping")
                        .HasForeignKey("DocumentCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentCollection");
                });

            modelBuilder.Entity("DAL.DAOs.Groups.AdditionalGroupMapperDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Companies.CompanyDAO", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.DAOs.Groups.GroupDAO", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.DAOs.Users.UserDAO", "User")
                        .WithMany("AdditionalGroupsMapper")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.DAOs.Groups.GroupDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Companies.CompanyDAO", "Company")
                        .WithMany("Groups")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DAL.DAOs.Programs.ProgramUIViewDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Programs.ProgramDAO", "Program")
                        .WithOne("ProgramUIView")
                        .HasForeignKey("DAL.DAOs.Programs.ProgramUIViewDAO", "ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("DAL.DAOs.Templates.TemplateSignatureFieldDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Templates.TemplateDAO", "Template")
                        .WithMany("TemplateSignatureFields")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DAL.DAOs.Templates.TemplateTextFieldDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Templates.TemplateDAO", "Template")
                        .WithMany("TemplateTextFields")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DAL.DAOs.Users.UserDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Companies.CompanyDAO", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.DAOs.Groups.GroupDAO", null)
                        .WithMany("Users")
                        .HasForeignKey("GroupDAOId");

                    b.HasOne("DAL.DAOs.Programs.ProgramUtilizationDAO", "ProgramUtilization")
                        .WithOne("User")
                        .HasForeignKey("DAL.DAOs.Users.UserDAO", "ProgramUtilizationId");

                    b.Navigation("Company");

                    b.Navigation("ProgramUtilization");
                });

            modelBuilder.Entity("DAL.DAOs.Users.UserTokensDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Users.UserDAO", "User")
                        .WithOne("UserTokens")
                        .HasForeignKey("DAL.DAOs.Users.UserTokensDAO", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.DAOs.Companies.CompanyConfigurationDAO", b =>
                {
                    b.Navigation("CompanyMessages");

                    b.Navigation("MessageProviders");
                });

            modelBuilder.Entity("DAL.DAOs.Companies.CompanyDAO", b =>
                {
                    b.Navigation("CompanyConfiguration");

                    b.Navigation("CompanySigner1Details");

                    b.Navigation("Groups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.DAOs.Contacts.ContactDAO", b =>
                {
                    b.Navigation("ContactGroupsMember");

                    b.Navigation("Seals");

                    b.Navigation("Signers");
                });

            modelBuilder.Entity("DAL.DAOs.Contacts.ContactsGroupDAO", b =>
                {
                    b.Navigation("ContactGroupMembers");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.DocumentCollectionDAO", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Signers");

                    b.Navigation("TokensMapping");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.DocumentDAO", b =>
                {
                    b.Navigation("SignatureFields");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.SignerDAO", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("OtpDetails");

                    b.Navigation("SignerAttachments");

                    b.Navigation("SignerFields");
                });

            modelBuilder.Entity("DAL.DAOs.Groups.GroupDAO", b =>
                {
                    b.Navigation("ActiveDirectoryGroup");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.DAOs.Programs.ProgramDAO", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("ProgramUIView");
                });

            modelBuilder.Entity("DAL.DAOs.Programs.ProgramUtilizationDAO", b =>
                {
                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.DAOs.Templates.TemplateDAO", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("TemplateSignatureFields");

                    b.Navigation("TemplateTextFields");
                });

            modelBuilder.Entity("DAL.DAOs.Users.UserDAO", b =>
                {
                    b.Navigation("AdditionalGroupsMapper");

                    b.Navigation("DocumentCollections");

                    b.Navigation("UserConfiguration");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
