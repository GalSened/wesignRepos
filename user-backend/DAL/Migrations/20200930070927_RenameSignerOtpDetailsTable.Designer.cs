// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(WeSignEntities))]
    [Migration("20200930070927_RenameSignerOtpDetailsTable")]
    partial class RenameSignerOtpDetailsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.DAOs.ActiveDirectory.ActiveDirectoryConfigDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Host")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActiveDirectoryConfigurations");
                });

            modelBuilder.Entity("DAL.DAOs.ActiveDirectory.ActiveDirectoryGroupDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActiveDirectoryContactsGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActiveDirectoryUsersGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .IsUnique();

                    b.ToTable("ActiveDirectoryGroups");
                });

            modelBuilder.Entity("DAL.DAOs.Companies.CompanyConfigurationDAO", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DeleteSignedDocumentAfterXDays")
                        .HasColumnType("int");

                    b.Property<int>("DeleteUnsignedDocumentAfterXDays")
                        .HasColumnType("int");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<bool>("ShouldNotifyWhileSignerSigned")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldSendSignedDocument")
                        .HasColumnType("bit");

                    b.Property<string>("SignatureColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SignerLinkExpirationInDays")
                        .HasColumnType("int");

                    b.HasKey("CompanyId");

                    b.ToTable("CompanyConfigurations");
                });

            modelBuilder.Entity("DAL.DAOs.Companies.CompanyDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActiveDirectoryConfigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProgramUtilizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActiveDirectoryConfigId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ProgramUtilizationId")
                        .IsUnique()
                        .HasFilter("[ProgramUtilizationId] IS NOT NULL");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Free Accounts",
                            ProgramId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000505"),
                            Name = "Ghost Users",
                            ProgramId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("DAL.DAOs.Configurations.CompanyMessageDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<int>("SendingMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyMessages");
                });

            modelBuilder.Entity("DAL.DAOs.Configurations.ConfigurationDAO", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("Configuration");

                    b.HasData(
                        new
                        {
                            Key = "SmtpServer",
                            Value = ""
                        },
                        new
                        {
                            Key = "SmtpPort",
                            Value = "25"
                        },
                        new
                        {
                            Key = "SmtpUser",
                            Value = ""
                        },
                        new
                        {
                            Key = "SmtpPassword",
                            Value = ""
                        },
                        new
                        {
                            Key = "SmtpFrom",
                            Value = ""
                        },
                        new
                        {
                            Key = "SmtpEnableSsl",
                            Value = "False"
                        },
                        new
                        {
                            Key = "SmtpAttachmentMaxSize",
                            Value = "8388608"
                        },
                        new
                        {
                            Key = "SmsUser",
                            Value = ""
                        },
                        new
                        {
                            Key = "SmsPassword",
                            Value = ""
                        },
                        new
                        {
                            Key = "SmsFrom",
                            Value = ""
                        },
                        new
                        {
                            Key = "SmsProvider",
                            Value = "1"
                        },
                        new
                        {
                            Key = "SmsLanguage",
                            Value = "1"
                        },
                        new
                        {
                            Key = "DeleteSignedDocumentAfterXDays",
                            Value = "14"
                        },
                        new
                        {
                            Key = "DeleteUnsignedDocumentAfterXDays",
                            Value = "30"
                        },
                        new
                        {
                            Key = "MessageBefore",
                            Value = "[DOCUMENT_NAME] : [LINK]"
                        },
                        new
                        {
                            Key = "MessageAfter",
                            Value = "[DOCUMENT_NAME] signed successfully. [LINK]"
                        },
                        new
                        {
                            Key = "LogArichveIntervalInDays",
                            Value = "30"
                        },
                        new
                        {
                            Key = "UseManagementOtpAuth",
                            Value = "false"
                        },
                        new
                        {
                            Key = "EnableFreeTrailUsers",
                            Value = "false"
                        });
                });

            modelBuilder.Entity("DAL.DAOs.Configurations.MessageProviderDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int>("ProviderType")
                        .HasColumnType("int");

                    b.Property<int>("SendingMethod")
                        .HasColumnType("int");

                    b.Property<string>("Server")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("MessageProviders");
                });

            modelBuilder.Entity("DAL.DAOs.Configurations.UserConfigurationDAO", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<bool>("ShouldNotifyWhileSignerSigned")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldSendSignedDocument")
                        .HasColumnType("bit");

                    b.Property<string>("SignatureColor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserConfigurations");
                });

            modelBuilder.Entity("DAL.DAOs.Contacts.ContactDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreationSource")
                        .HasColumnType("int");

                    b.Property<int>("DefaultSendingMethod")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("DAL.DAOs.Contacts.ContactSealsDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactSeals");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.DocumentCollectionDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ShouldSend")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShouldSendSignedDocument")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SignedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentCollections");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.DocumentDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DocumentCollectionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.DocumentSignatureFieldDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentSignatureFields");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.SignerFieldDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SignerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SignerId");

                    b.ToTable("SignerFields");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.NotesDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SignerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SignerNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNote")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SignerId")
                        .IsUnique();

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.SignerAttachmentDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SignerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SignerId");

                    b.ToTable("SignerAttachments");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.SignerDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SendingMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeRejected")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeSent")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeSigned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeViewed")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("DocumentCollectionId");

                    b.ToTable("Signers");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.SignerOtpDetailsDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SignerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SignerId")
                        .IsUnique();

                    b.ToTable("SignerOtpDetails");
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.SignerTokenMappingDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GuidToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JwtToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SignerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DocumentCollectionId");

                    b.ToTable("SignerTokensMapping");
                });

            modelBuilder.Entity("DAL.DAOs.Groups.GroupDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GroupStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DAL.DAOs.LogDAO", b =>
                {
                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TimeStamp");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("DAL.DAOs.Programs.ProgramDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("DocumentsPerMonth")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ServerSignature")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowContacts")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowGroupSign")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowLiveMode")
                        .HasColumnType("bit");

                    b.Property<bool>("ShouldShowSelfSign")
                        .HasColumnType("bit");

                    b.Property<bool>("SmartCard")
                        .HasColumnType("bit");

                    b.Property<long>("SmsPerMonth")
                        .HasColumnType("bigint");

                    b.Property<long>("Templates")
                        .HasColumnType("bigint");

                    b.Property<long>("Users")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Programs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            DocumentsPerMonth = 5L,
                            Name = "Trial",
                            Note = "Upgrade now by calling our Support Center: (+972)3-1111111",
                            ServerSignature = false,
                            ShouldShowContacts = false,
                            ShouldShowGroupSign = false,
                            ShouldShowLiveMode = false,
                            ShouldShowSelfSign = false,
                            SmartCard = false,
                            SmsPerMonth = 0L,
                            Templates = 2L,
                            Users = 0L
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            DocumentsPerMonth = -1L,
                            Name = "Unlimited",
                            ServerSignature = true,
                            ShouldShowContacts = false,
                            ShouldShowGroupSign = false,
                            ShouldShowLiveMode = false,
                            ShouldShowSelfSign = false,
                            SmartCard = true,
                            SmsPerMonth = -1L,
                            Templates = -1L,
                            Users = -1L
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            DocumentsPerMonth = 50L,
                            Name = "Basic",
                            ServerSignature = true,
                            ShouldShowContacts = false,
                            ShouldShowGroupSign = false,
                            ShouldShowLiveMode = false,
                            ShouldShowSelfSign = false,
                            SmartCard = true,
                            SmsPerMonth = 200L,
                            Templates = 15L,
                            Users = 2L
                        });
                });

            modelBuilder.Entity("DAL.DAOs.Programs.ProgramUtilizationDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Documents")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("datetime2");

                    b.Property<long>("SMS")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Templates")
                        .HasColumnType("bigint");

                    b.Property<long>("Users")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ProgramUtilizations");
                });

            modelBuilder.Entity("DAL.DAOs.Templates.TemplateDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("DAL.DAOs.Templates.TemplateSignatureFieldDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SignaturFieldType")
                        .HasColumnType("int");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateSignatureFields");
                });

            modelBuilder.Entity("DAL.DAOs.Templates.TemplateTextFieldDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Regex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TextFieldType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateTextFields");
                });

            modelBuilder.Entity("DAL.DAOs.Users.UserDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreationSource")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GroupDAOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProgramUtilizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GroupDAOId");

                    b.HasIndex("ProgramUtilizationId")
                        .IsUnique()
                        .HasFilter("[ProgramUtilizationId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CompanyId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreationSource = 0,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "systemadmin@comda.co.il",
                            GroupId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "SystemAdmin",
                            Password = "aFDgUq3rMdhhvRqzQ+/9v51hevUQyVubl2XdsvpZqQ/Q4dVz",
                            Status = 2,
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CompanyId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreationSource = 0,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "paymentAdmin@comda.co.il",
                            GroupId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "PaymentAdmin",
                            Password = "aFDgUq3rMdhhvRqzQ+/9v51hevUQyVubl2XdsvpZqQ/Q4dVz",
                            Status = 2,
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000505"),
                            CompanyId = new Guid("00000000-0000-0000-0000-000000000505"),
                            CreationSource = 0,
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ghost@comda.co.il",
                            GroupId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "GhostUser",
                            Password = "oRxggjg8wbOxTC5DvP4vXzV32vFmnNdhQH8vRpElJ6lziTJk",
                            Status = 2,
                            Type = 5
                        });
                });

            modelBuilder.Entity("DAL.DAOs.Users.UserTokensDAO", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UsersTokens");
                });

            modelBuilder.Entity("DAL.DAOs.ActiveDirectory.ActiveDirectoryGroupDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Groups.GroupDAO", "Group")
                        .WithOne("ActiveDirectoryGroup")
                        .HasForeignKey("DAL.DAOs.ActiveDirectory.ActiveDirectoryGroupDAO", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Companies.CompanyConfigurationDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Companies.CompanyDAO", "Company")
                        .WithOne("CompanyConfiguration")
                        .HasForeignKey("DAL.DAOs.Companies.CompanyConfigurationDAO", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Companies.CompanyDAO", b =>
                {
                    b.HasOne("DAL.DAOs.ActiveDirectory.ActiveDirectoryConfigDAO", "ActiveDirectoryConfig")
                        .WithMany()
                        .HasForeignKey("ActiveDirectoryConfigId");

                    b.HasOne("DAL.DAOs.Programs.ProgramDAO", "Program")
                        .WithMany("Companies")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.DAOs.Programs.ProgramUtilizationDAO", "ProgramUtilization")
                        .WithOne("Company")
                        .HasForeignKey("DAL.DAOs.Companies.CompanyDAO", "ProgramUtilizationId");
                });

            modelBuilder.Entity("DAL.DAOs.Configurations.CompanyMessageDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Companies.CompanyConfigurationDAO", "CompanyConfiguration")
                        .WithMany("CompanyMessages")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Configurations.MessageProviderDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Companies.CompanyConfigurationDAO", "CompanyConfiguration")
                        .WithMany("MessageProviders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Configurations.UserConfigurationDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Users.UserDAO", "User")
                        .WithOne("UserConfiguration")
                        .HasForeignKey("DAL.DAOs.Configurations.UserConfigurationDAO", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Contacts.ContactDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Users.UserDAO", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Contacts.ContactSealsDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Contacts.ContactDAO", "Contact")
                        .WithMany("Seals")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Documents.DocumentCollectionDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Users.UserDAO", "User")
                        .WithMany("DocumentCollections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Documents.DocumentDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Documents.DocumentCollectionDAO", "DocumentCollection")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.DAOs.Templates.TemplateDAO", "Template")
                        .WithMany("Documents")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Documents.DocumentSignatureFieldDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Documents.DocumentDAO", "Document")
                        .WithMany("SignatureFields")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Documents.SignerFieldDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Documents.Signers.SignerDAO", "Signer")
                        .WithMany("SignerFields")
                        .HasForeignKey("SignerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.NotesDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Documents.Signers.SignerDAO", "Signer")
                        .WithOne("Notes")
                        .HasForeignKey("DAL.DAOs.Documents.Signers.NotesDAO", "SignerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.SignerAttachmentDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Documents.Signers.SignerDAO", "Signer")
                        .WithMany("SignerAttachments")
                        .HasForeignKey("SignerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.SignerDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Contacts.ContactDAO", "Contact")
                        .WithMany("Signers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.DAOs.Documents.DocumentCollectionDAO", "DocumentCollection")
                        .WithMany("Signers")
                        .HasForeignKey("DocumentCollectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.SignerOtpDetailsDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Documents.Signers.SignerDAO", "Signer")
                        .WithOne("OtpDetails")
                        .HasForeignKey("DAL.DAOs.Documents.Signers.SignerOtpDetailsDAO", "SignerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Documents.Signers.SignerTokenMappingDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Documents.DocumentCollectionDAO", "DocumentCollection")
                        .WithMany("TokensMapping")
                        .HasForeignKey("DocumentCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Groups.GroupDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Companies.CompanyDAO", "Company")
                        .WithMany("Groups")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Templates.TemplateSignatureFieldDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Templates.TemplateDAO", "Template")
                        .WithMany("TemplateSignatureFields")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Templates.TemplateTextFieldDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Templates.TemplateDAO", "Template")
                        .WithMany("TemplateTextFields")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.DAOs.Users.UserDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Companies.CompanyDAO", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.DAOs.Groups.GroupDAO", null)
                        .WithMany("Users")
                        .HasForeignKey("GroupDAOId");

                    b.HasOne("DAL.DAOs.Programs.ProgramUtilizationDAO", "ProgramUtilization")
                        .WithOne("User")
                        .HasForeignKey("DAL.DAOs.Users.UserDAO", "ProgramUtilizationId");
                });

            modelBuilder.Entity("DAL.DAOs.Users.UserTokensDAO", b =>
                {
                    b.HasOne("DAL.DAOs.Users.UserDAO", "User")
                        .WithOne("UserTokens")
                        .HasForeignKey("DAL.DAOs.Users.UserTokensDAO", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
